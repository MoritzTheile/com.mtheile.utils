package com.lithodat.app.litho.web.rest.MODELNAME_LOWERCASE_TOKEN;

import java.net.URI;
import java.util.List;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import com.lithodat.app.litho.service.MODELNAME_TOKEN.ENTITYNAME_TOKENLithoService;
import com.lithodat.app.litho.service.util.AuthzException;
import com.lithodat.app.litho.service.util.FrequentlyUsedBeans;
import com.lithodat.app.service.dto.ENTITYNAME_TOKENCriteria;
import com.lithodat.app.service.dto.ENTITYNAME_TOKENDTO;
import com.lithodat.app.web.rest.errors.BadRequestAlertException;

import io.github.jhipster.web.util.HeaderUtil;
import io.github.jhipster.web.util.PaginationUtil;
import io.github.jhipster.web.util.ResponseUtil;
import io.swagger.annotations.Api;

@Api(value = ENTITYNAME_TOKENLithoResource.ENTITY_NAME, description = "CRUD operations for " + ENTITYNAME_TOKENLithoResource.ENTITY_NAME, tags = { ENTITYNAME_TOKENLithoResource.ENTITY_NAME })
@RestController
@RequestMapping(ENTITYNAME_TOKENLithoResource.REQUEST_URL)
public class ENTITYNAME_TOKENLithoResource {

	public static final String ENTITY_NAME = "ENTITYNAME_TOKEN";

	public static final String REQUEST_URL = "/api/MODELNAME_TOKEN";
	private static final String RESOURCE_URL = "/" + ENTITY_NAME;

	@Value("${jhipster.clientApp.name}")
	private String applicationName;

	@Autowired
	private FrequentlyUsedBeans fub;

	@Autowired
	private ENTITYNAME_TOKENLithoService lithoService;

	@PostMapping(RESOURCE_URL)
	public ResponseEntity<ENTITYNAME_TOKENDTO> create(@Valid @RequestBody ENTITYNAME_TOKENDTO dto) throws Exception {
		if (dto.getId() != null) {
			throw new BadRequestAlertException("A new entity cannot already have an ID", ENTITY_NAME, "idexists");
		}
		ENTITYNAME_TOKENDTO result = lithoService.create(fub.getLithoAuth(), dto, null);
		return ResponseEntity.created(new URI("/api" + RESOURCE_URL + "/" + result.getId()))
				.headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getId().toString()))
				.body(result);
	}

	@PutMapping(RESOURCE_URL)
	public ResponseEntity<ENTITYNAME_TOKENDTO> update(@Valid @RequestBody ENTITYNAME_TOKENDTO dataPointDTO) throws Exception {
		if (dataPointDTO.getId() == null) {
			throw new BadRequestAlertException("Invalid id", ENTITY_NAME, "idnull");
		}
		ENTITYNAME_TOKENDTO result = lithoService.update(fub.getLithoAuth(), dataPointDTO);
		return ResponseEntity.ok()
				.headers(HeaderUtil.createEntityUpdateAlert(applicationName, true, ENTITY_NAME, dataPointDTO.getId().toString()))
				.body(result);
	}

	@GetMapping(RESOURCE_URL)
	public ResponseEntity<List<ENTITYNAME_TOKENDTO>> get(ENTITYNAME_TOKENCriteria criteria, Pageable pageable, @RequestParam MultiValueMap<String, String> queryParams, UriComponentsBuilder uriBuilder) throws AuthzException, Exception {
		Page<ENTITYNAME_TOKENDTO> page = lithoService.findByCriteria(fub.getLithoAuth(), criteria, pageable);
		HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(uriBuilder.queryParams(queryParams), page);
		return ResponseEntity.ok().headers(headers).body(page.getContent());
	}

	@GetMapping(RESOURCE_URL + "/count")
	public ResponseEntity<Long> count(ENTITYNAME_TOKENCriteria criteria) throws Exception {
		return ResponseEntity.ok().body(lithoService.countByCriteria(fub.getLithoAuth(), criteria));
	}

	@GetMapping(RESOURCE_URL + "/{id}")
	public ResponseEntity<ENTITYNAME_TOKENDTO> get(@PathVariable Long id) throws Exception {
		Optional<ENTITYNAME_TOKENDTO> dataPointDTO = lithoService.findOne(fub.getLithoAuth(), id);
		return ResponseUtil.wrapOrNotFound(dataPointDTO);
	}

	@DeleteMapping(RESOURCE_URL + "/{id}")
	public ResponseEntity<Void> delete(@PathVariable Long id) throws Exception {
		lithoService.delete(fub.getLithoAuth(), id);
		return ResponseEntity.noContent().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, id.toString())).build();
	}
}
