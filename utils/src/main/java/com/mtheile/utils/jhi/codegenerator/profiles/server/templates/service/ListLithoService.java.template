package com.lithodat.app.litho.service.MODELNAME_TOKEN_LOWERCASE;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.lithodat.app.litho.service.dto.ParamDTO;
import com.lithodat.app.litho.service.util.AuthzException;
import com.lithodat.app.litho.service.util.Bouncer.BounceDecision;
import com.lithodat.app.litho.service.util.FrequentlyUsedBeans;
import com.lithodat.app.litho.service.util.LithoAuth;
import com.lithodat.app.litho.service.util.LithoCRUD;
import com.lithodat.app.service.ENTITYNAME_TOKENQueryService;
import com.lithodat.app.service.ENTITYNAME_TOKENService;
import com.lithodat.app.service.dto.ENTITYNAME_TOKENCriteria;
import com.lithodat.app.service.dto.ENTITYNAME_TOKENDTO;

@Service
public class ENTITYNAME_TOKENLithoService implements LithoCRUD<ENTITYNAME_TOKENDTO, ENTITYNAME_TOKENCriteria> {

	@Autowired
	private FrequentlyUsedBeans fub;

	@Autowired
	private ENTITYNAME_TOKENService service;

	@Autowired
	private ENTITYNAME_TOKENQueryService queryService;

	@Transactional
	public ENTITYNAME_TOKENDTO create(LithoAuth lithoAuth, ENTITYNAME_TOKENDTO dto, ParamDTO params) throws Exception {

		{ // bouncing

			BounceDecision bounceDecision = fub.bouncer.getDecisionFor(lithoAuth);

			bounceDecision.allowEntryIf(bounceDecision.userIsAdmin());

		}

		return service.save(dto);
	}

	public Optional<ENTITYNAME_TOKENDTO> findOne(LithoAuth lithoAuth, Long id) throws AuthzException {

		{ // bouncing

			BounceDecision bounceDecision = fub.bouncer.getDecisionFor(lithoAuth);

			bounceDecision.allowEntryIf(bounceDecision.userIsGiven());

		}

		return service.findOne(id);

	}

	public Long countByCriteria(LithoAuth lithoAuth, ENTITYNAME_TOKENCriteria criteria) throws AuthzException {

		{ // bouncing

			BounceDecision bounceDecision = fub.bouncer.getDecisionFor(lithoAuth);

			bounceDecision.allowEntryIf(bounceDecision.userIsGiven());

		}

		return queryService.countByCriteria(criteria);

	}

	public Page<ENTITYNAME_TOKENDTO> findByCriteria(final LithoAuth lithoAuth, ENTITYNAME_TOKENCriteria criteria, Pageable pageable) throws AuthzException {

		{ // bouncing

			BounceDecision bounceDecision = fub.bouncer.getDecisionFor(lithoAuth);

			bounceDecision.allowEntryIf(bounceDecision.userIsGiven());

		}

		return queryService.findByCriteria(criteria, pageable);

	}

	@Override
	public ENTITYNAME_TOKENDTO update(LithoAuth lithoAuth, ENTITYNAME_TOKENDTO dto) throws Exception {

		{ // bouncing

			BounceDecision bounceDecision = fub.bouncer.getDecisionFor(lithoAuth);

			bounceDecision.allowEntryIf(bounceDecision.userIsAdmin());

		}

		return service.save(dto);

	}

	public void delete(LithoAuth lithoAuth, Long id) throws AuthzException {

		{ // bouncing

			BounceDecision bounceDecision = fub.bouncer.getDecisionFor(lithoAuth);

			bounceDecision.allowEntryIf(bounceDecision.userIsAdmin());

		}

		service.delete(id);
	}

}
