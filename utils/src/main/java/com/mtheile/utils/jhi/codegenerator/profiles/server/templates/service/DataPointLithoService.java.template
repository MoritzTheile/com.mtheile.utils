package com.lithodat.app.litho.service.MODULNAME_LOWERCASE_TOKEN;

import java.io.File;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.persistence.criteria.Subquery;

import org.geotools.data.shapefile.ShapefileDataStore;
import org.geotools.data.simple.SimpleFeatureCollection;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.common.io.Files;
import com.lithodat.app.domain.DataPoint;
import com.lithodat.app.domain.DataPoint_;
import com.lithodat.app.domain.Location;
import com.lithodat.app.domain.Location_;
import com.lithodat.app.domain.Sample;
import com.lithodat.app.domain.Sample_;
import com.lithodat.app.domain.ENTITYNAME_TOKEN;
import com.lithodat.app.domain.ENTITYNAME_TOKEN_;
import com.lithodat.app.domain.MODULNAME_TOKENSpotData;
import com.lithodat.app.domain.enumeration.DataStructure;
import com.lithodat.app.litho.service.coremodel.DataPointLithoService;
import com.lithodat.app.litho.service.coremodel.MaterialLithoService;
import com.lithodat.app.litho.service.coremodel.SampleWithLocationLithoService;
import com.lithodat.app.litho.service.dto.ICPMSLithoCriteria;
import com.lithodat.app.litho.service.dto.NameDTO;
import com.lithodat.app.litho.service.dto.ParamDTO;
import com.lithodat.app.litho.service.dto.ParamDTO.PARAM;
import com.lithodat.app.litho.service.dto.ENTITYNAME_TOKENLithoCriteria;
import com.lithodat.app.litho.service.dto.ENTITYNAME_TOKENLithoDTO;
import com.lithodat.app.litho.service.dto.projection.DataPointLithoProjectionDTO;
import com.lithodat.app.litho.service.geojson.base.ProjectionDTOCollection;
import com.lithodat.app.litho.service.geojson.cluster.ClusterDTO;
import com.lithodat.app.litho.service.geojson.cluster.Clusterer;
import com.lithodat.app.litho.service.other.batch.BatchSTATICS;
import com.lithodat.app.litho.service.util.Bouncer;
import com.lithodat.app.litho.service.util.Bouncer.BounceDecision;
import com.lithodat.app.litho.service.util.FindByNameService;
import com.lithodat.app.litho.service.util.GeoSTATICS;
import com.lithodat.app.litho.service.util.LithoAuth;
import com.lithodat.app.litho.service.util.LithoCRUD;
import com.lithodat.app.litho.service.util.ServiceSTATICS;
import com.lithodat.app.litho.service.util.ServiceUtil;
import com.lithodat.app.litho.service.util.Specifications;
import com.lithodat.app.litho.service.util.changedby.ChangedByHelper;
import com.lithodat.app.litho.service.util.table.FloatTable;
import com.lithodat.app.repository.ENTITYNAME_TOKENRepository;
import com.lithodat.app.service.DataPointService;
import com.lithodat.app.service.ENTITYNAME_TOKENQueryService;
import com.lithodat.app.service.ENTITYNAME_TOKENService;
import com.lithodat.app.service.dto.DataPointDTO;
import com.lithodat.app.service.dto.MODULNAME_TOKENAgeGroupCriteria;
import com.lithodat.app.service.dto.ENTITYNAME_TOKENDTO;
import com.lithodat.app.service.dto.MODULNAME_TOKENSpotDataCriteria;
import com.lithodat.app.service.mapper.ENTITYNAME_TOKENMapper;
import com.lithodat.app.service.util.RandomUtil;

import io.github.jhipster.service.filter.LongFilter;

@Service
@Transactional
public class ENTITYNAME_TOKENLithoService implements LithoCRUD<ENTITYNAME_TOKENLithoDTO, ENTITYNAME_TOKENLithoCriteria>, ServiceUtil<ENTITYNAME_TOKENLithoCriteria> {

	@Autowired
	private Bouncer bouncer;

	@Autowired
	private ENTITYNAME_TOKENService service;

	@Autowired
	private ENTITYNAME_TOKENQueryService queryService;

	@Autowired
	private ENTITYNAME_TOKENRepository repository;

	@Autowired
	private ENTITYNAME_TOKENMapper mapper;

	@Autowired
	private DataPointLithoService extendedLithoService;

	@Autowired
	private DataPointService extendedServices;

	@Autowired
	private MaterialLithoService materialLithoService;

	@Autowired
	private MODULNAME_TOKENSpotDataLithoService uPbSpotDataLithoService;

	@Autowired
	private MODULNAME_TOKENAgeGroupLithoService uPbAgeGroupLithoService;

	@Autowired
	private EntityManager em;

	private final Logger log = LoggerFactory.getLogger(this.getClass());

	@Transactional
	public ENTITYNAME_TOKENLithoDTO create(LithoAuth lithoAuth, ENTITYNAME_TOKENLithoDTO dto, ParamDTO params) throws Exception {

		{ // bouncing

			BounceDecision bounceDecision = bouncer.getDecisionFor(lithoAuth);

			// checking target package
			bounceDecision.allowEntryIf(bounceDecision.packageContentIsWriteableByUser(getTargetDataPackage(dto)));

		}

		validateData(dto);

		ENTITYNAME_TOKENLithoDTO resultDTO = new ENTITYNAME_TOKENLithoDTO();

		resultDTO.setENTITYNAME_TOKENDTO(service.save(dto.getENTITYNAME_TOKENDTO()));

		DataPointDTO extensionDTO = dto.getDataPointDTO();

		extensionDTO.setENTITYNAME_TOKENId(resultDTO.getENTITYNAME_TOKENDTO().getId());

		// some redundant info here:
		extensionDTO.setDataEntityId(resultDTO.getENTITYNAME_TOKENDTO().getId());
		extensionDTO.setDataStructure(DataStructure.UPB);

		extensionDTO = extendedLithoService.create(lithoAuth, extensionDTO, params);

		resultDTO.setDataPointDTO(extensionDTO);

		ENTITYNAME_TOKENLithoDTO resultDataPointLithoDTO = toHydratedLithoDTO(lithoAuth, resultDTO, ParamDTO.is(params, PARAM.HYDRATE, true));

		return resultDataPointLithoDTO;

	}

	public Optional<ENTITYNAME_TOKENLithoDTO> findOne(LithoAuth lithoAuth, Long id) throws Exception {

		{ // bouncing

			BounceDecision bounceDecision = bouncer.getDecisionFor(lithoAuth);

			// checking current package
			bounceDecision.allowEntryIf(bounceDecision.packageContentIsViewableByUser(getCurrentDataPackage(id)));

		}

		ENTITYNAME_TOKENDTO mainDTO = service.findOne(id).get();

		ENTITYNAME_TOKENLithoDTO dto = toExtendedDTO(lithoAuth, mainDTO);

		return Optional.of(toHydratedLithoDTO(lithoAuth, dto, true));

	}

	private ENTITYNAME_TOKENLithoDTO toExtendedDTO(LithoAuth lithoAuth, ENTITYNAME_TOKENDTO mainDTO) throws Exception {

		ENTITYNAME_TOKENLithoDTO dto = new ENTITYNAME_TOKENLithoDTO();

		dto.setENTITYNAME_TOKENDTO(mainDTO);

		DataPointDTO dataPointDTO = extendedLithoService.findOne(lithoAuth, repository.getOne(mainDTO.getId()).getDataPoint().getId()).get();

		dto.setDataPointDTO(dataPointDTO);

		dto.setDataPointMetaDTO(extendedLithoService.getMetaInfo(dataPointDTO));

		return dto;

	}

	public Long countByCriteria(LithoAuth lithoAuth, ENTITYNAME_TOKENLithoCriteria criteria) throws Exception {

		Specification<ENTITYNAME_TOKEN> specification = createSpecification(lithoAuth, criteria);

		CriteriaBuilder cb = em.getCriteriaBuilder();

		CriteriaQuery<Long> criteriaQuery = cb.createQuery(Long.class);

		{ // defining the criteriaQuery

			Root<ENTITYNAME_TOKEN> root = criteriaQuery.from(ENTITYNAME_TOKEN.class);

			criteriaQuery = criteriaQuery.select(cb.count(root));

			Predicate wherePredicate = specification.toPredicate(root, criteriaQuery, cb);

			criteriaQuery = criteriaQuery.where(wherePredicate);

		}

		TypedQuery<Long> query = em.createQuery(criteriaQuery);

		return query.getSingleResult();

	}

	public Page<ENTITYNAME_TOKENLithoDTO> findByCriteria(LithoAuth lithoAuth, ENTITYNAME_TOKENLithoCriteria criteria, Pageable pageable) throws Exception {

		Specification<ENTITYNAME_TOKEN> specifications = createSpecification(lithoAuth, criteria);

		Page<ENTITYNAME_TOKEN> entityPage = repository.findAll(specifications, ServiceSTATICS.removePrefixFromSortPropName(pageable));

		Page<ENTITYNAME_TOKENDTO> dtoPage = new PageImpl<ENTITYNAME_TOKENDTO>(entityPage.getContent().stream().map(mapper::toDto).collect(Collectors.toList()), pageable, entityPage.getTotalElements());

		List<ENTITYNAME_TOKENLithoDTO> dtos = new ArrayList<>();

		for (ENTITYNAME_TOKENDTO mainDTO : dtoPage.getContent()) {

			dtos.add(toHydratedLithoDTO(lithoAuth, toExtendedDTO(lithoAuth, mainDTO), true));

		}

		return new PageImpl<ENTITYNAME_TOKENLithoDTO>(dtos, pageable, dtoPage.getTotalElements());

	}

	private Specification<ENTITYNAME_TOKEN> createSpecification(LithoAuth lithoAuth, ENTITYNAME_TOKENLithoCriteria criteria) throws Exception {
		// extending "in" search for decendants
		if (criteria.getMineralId() != null && criteria.getMineralId().getIn() != null) {
			criteria.getMineralId().getIn().addAll(materialLithoService.getDecendantMaterialIds(criteria.getMineralId()));
		}

		Specification<ENTITYNAME_TOKEN> jhSpecification = queryService.createSpecification(criteria);

		Specification<DataPoint> extendedSpecification = extendedLithoService.createLithoSpecification(lithoAuth, criteria.getDataPointLithoCriteria());
		
		{// taking care of bounding box	
			Specification<DataPoint> boundingBoxSpecification = Specifications.dataPointIsInBoundingBox(criteria.getLowerBound(), criteria.getLeftBound(), criteria.getUpperBound(), criteria.getRightBound());
			extendedSpecification = extendedSpecification.and(boundingBoxSpecification);
		}

		{ // filtering deleted entities

			extendedSpecification = extendedSpecification.and(Specifications.dataPointIsNotDeleted());

		}

		Specification<ENTITYNAME_TOKEN> joinedSpecifications = jhSpecification.and(makeENTITYNAME_TOKENSpecification(extendedSpecification));
		return joinedSpecifications;
	}

	public ENTITYNAME_TOKENLithoDTO update(LithoAuth lithoAuth, ENTITYNAME_TOKENLithoDTO dto) throws Exception {

		{ // bouncing

			BounceDecision bounceDecision = bouncer.getDecisionFor(lithoAuth);

			// checking target package
			bounceDecision.allowEntryIf(bounceDecision.packageContentIsWriteableByUser(getTargetDataPackage(dto)));

			// checking source package
			bounceDecision.allowEntryIf(bounceDecision.packageContentIsWriteableByUser(getCurrentDataPackage(dto.getId())));

		}
		validateData(dto);

		// make sure it's an extension
		if (!dto.getENTITYNAME_TOKENDTO().getId().equals(dto.getDataPointDTO().getENTITYNAME_TOKENId())) {
			throw new Exception("ENTITYNAME_TOKEN is not an extension (see referencing id)");
		}

		ENTITYNAME_TOKENLithoDTO resultDTO = new ENTITYNAME_TOKENLithoDTO();

		resultDTO.setENTITYNAME_TOKENDTO(service.save(dto.getENTITYNAME_TOKENDTO()));
		resultDTO.setDataPointDTO(extendedLithoService.update(lithoAuth, dto.getDataPointDTO()));

		return toHydratedLithoDTO(lithoAuth, resultDTO, true);

	}

	public void delete(LithoAuth lithoAuth, Long id) throws Exception {
		{ // bouncing

			BounceDecision bounceDecision = bouncer.getDecisionFor(lithoAuth);

			// checking current package
			bounceDecision.allowEntryIf(bounceDecision.packageContentIsWriteableByUser(getCurrentDataPackage(id)));

		}

		DataPoint dataPoint = repository.getOne(id).getDataPoint();

		DataPointDTO toBeDeletedDTO = extendedServices.findOne(dataPoint.getId()).get();

		ChangedByHelper.delete(lithoAuth, toBeDeletedDTO, Instant.now());

		extendedServices.save(toBeDeletedDTO);

	}

	public ENTITYNAME_TOKENLithoDTO save(LithoAuth lithoAuth, ENTITYNAME_TOKENLithoDTO dto) throws Exception {

		if (dto.getId() == null) {
			return create(lithoAuth, dto, null);
		} else {
			return update(lithoAuth, dto);
		}
	}

	private Long getTargetDataPackage(ENTITYNAME_TOKENLithoDTO dto) throws Exception {

		return dto.getDataPointDTO().getDataPackageId();

	}

	private Long getCurrentDataPackage(Long id) throws Exception {

		return repository.getOne(id).getDataPoint().getDataPackage().getId();

	}

	public Long getSampleId(Long id) throws Exception {

		Sample sample = repository.getOne(id).getDataPoint().getSample();
		if (sample == null) {
			return null;
		}

		return sample.getId();

	}

	private static Specification<ENTITYNAME_TOKEN> makeENTITYNAME_TOKENSpecification(Specification<DataPoint> dataPointSpecification) {

		return (root, query, criteriaBuilder) -> {

			Subquery<Long> subquery = query.subquery(Long.class);

			Root<DataPoint> subRoot = subquery.from(DataPoint.class);

			Join<DataPoint, ENTITYNAME_TOKEN> subJoin = subRoot.join(DataPoint_.ENTITYNAME_FIRSTLETTER_LOWERCASE_TOKEN);

			subquery.select(subRoot.get(DataPoint_.id));

			Predicate specificationPredicate = dataPointSpecification.toPredicate(subRoot, query, criteriaBuilder);

			if (specificationPredicate == null) {
				return criteriaBuilder.conjunction();
			}

			Predicate joinPredicate = criteriaBuilder.equal(root.get(ENTITYNAME_TOKEN_.dataPoint), subJoin.get(ENTITYNAME_TOKEN_.dataPoint));

			subquery.where(criteriaBuilder.and(joinPredicate, specificationPredicate));

			return criteriaBuilder.exists(subquery);

		};
	}

	private ENTITYNAME_TOKENLithoDTO toHydratedLithoDTO(LithoAuth lithoAuth, ENTITYNAME_TOKENLithoDTO dto, Boolean hydrateDTO) throws Exception {

		{ // adding ICPMSMetadata if existent

			ICPMSLithoCriteria criteria = new ICPMSLithoCriteria();
			{
				LongFilter longFilter = new LongFilter();
				longFilter.setEquals(dto.getDataPointDTO().getId());
				criteria.setDataPointId(longFilter);
			}

		}

		if (!hydrateDTO) {
			return dto;
		}
		{// count
			MODULNAME_TOKENAgeGroupCriteria criteria = new MODULNAME_TOKENAgeGroupCriteria();
			LongFilter longFilter = new LongFilter();
			longFilter.setEquals(dto.getId());
			criteria.setENTITYNAME_TOKENId(longFilter);

			Long count = uPbAgeGroupLithoService.countByCriteria(lithoAuth, criteria);
			dto.setCountAgeGroups(count.intValue());
		}

		{// count
			MODULNAME_TOKENSpotDataCriteria criteria = new MODULNAME_TOKENSpotDataCriteria();
			LongFilter longFilter = new LongFilter();
			longFilter.setEquals(dto.getId());
			criteria.setENTITYNAME_TOKENId(longFilter);

			Long count = uPbSpotDataLithoService.countByCriteria(lithoAuth, criteria);
			dto.setCountSpots(count.intValue());
		}

		return dto;
	}

	private void validateData(ENTITYNAME_TOKENLithoDTO dto) throws Exception {

		if (dto.getDataPointDTO().getSampleId() != null && dto.getENTITYNAME_TOKENDTO().getReferenceMaterialId() != null) {
			throw new Exception("Only one can be assigned. Either Unknown Sample or Reference Material.");
		}

	}

	public List<NameDTO> getNameDTOs(LithoAuth lithoAuth, ENTITYNAME_TOKENLithoCriteria criteria, Pageable pageable) throws Exception {

		Specification<ENTITYNAME_TOKEN> specification = createSpecification(lithoAuth, criteria);

		CriteriaBuilder cb = em.getCriteriaBuilder();

		CriteriaQuery<NameDTO> criteriaQuery = cb.createQuery(NameDTO.class);

		{ // defining the criteriaQuery
			// FROM
			Root<ENTITYNAME_TOKEN> root = criteriaQuery.from(ENTITYNAME_TOKEN.class);

			Join<ENTITYNAME_TOKEN, DataPoint> dataPointJoin = root.join(ENTITYNAME_TOKEN_.dataPoint, JoinType.LEFT);

			criteriaQuery = criteriaQuery.select(cb.construct(NameDTO.class, root.get(ENTITYNAME_TOKEN_.id), dataPointJoin.get(DataPoint_.name)));

			Predicate wherePredicate = specification.toPredicate(root, criteriaQuery, cb);

			criteriaQuery = criteriaQuery.where(wherePredicate);

		}
		TypedQuery<NameDTO> query = em.createQuery(criteriaQuery).setFirstResult((int) pageable.getOffset()).setMaxResults(pageable.getPageSize());

		return query.getResultList();
	}

	public String getName(Long id) throws Exception {

		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<String> criteriaQuery = cb.createQuery(String.class);

		{ // defining the criteriaQuery

			// FROM
			Root<DataPoint> root = criteriaQuery.from(DataPoint.class);

			Join<DataPoint, ENTITYNAME_TOKEN> gcDataPointJoin = root.join(DataPoint_.ENTITYNAME_FIRSTLETTER_LOWERCASE_TOKEN, JoinType.LEFT);

			Predicate predicate = cb.equal(gcDataPointJoin.get(ENTITYNAME_TOKEN_.id), id);

			criteriaQuery = criteriaQuery.select(root.get(DataPoint_.name));

			criteriaQuery.where(predicate);
		}

		return FindByNameService.list2singleResult(em.createQuery(criteriaQuery).getResultList());
	}

	public List<Long> findIdsByCriteria(LithoAuth lithoAuth, ENTITYNAME_TOKENLithoCriteria criteria) throws Exception {

		Specification<ENTITYNAME_TOKEN> specification = createSpecification(lithoAuth, criteria);

		CriteriaBuilder cb = em.getCriteriaBuilder();

		CriteriaQuery<Long> criteriaQuery = cb.createQuery(Long.class);

		{ // defining the criteriaQuery
			// FROM
			Root<ENTITYNAME_TOKEN> root = criteriaQuery.from(ENTITYNAME_TOKEN.class);

			criteriaQuery = criteriaQuery.select(root.get(ENTITYNAME_TOKEN_.id));

			Predicate wherePredicate = specification.toPredicate(root, criteriaQuery, cb);

			criteriaQuery = criteriaQuery.where(wherePredicate);

		}

		TypedQuery<Long> query = em.createQuery(criteriaQuery);

		return query.getResultList();
	}

	public List<NameDTO> findNamesByCriteria(LithoAuth lithoAuth, ENTITYNAME_TOKENLithoCriteria criteria, Pageable pageable) throws Exception {

		Specification<ENTITYNAME_TOKEN> specification = createSpecification(lithoAuth, criteria);

		CriteriaBuilder cb = em.getCriteriaBuilder();

		CriteriaQuery<NameDTO> criteriaQuery = cb.createQuery(NameDTO.class);

		{ // defining the criteriaQuery
			// FROM
			Root<ENTITYNAME_TOKEN> root = criteriaQuery.from(ENTITYNAME_TOKEN.class);
			Join<ENTITYNAME_TOKEN, DataPoint> dataPointJoin = root.join(ENTITYNAME_TOKEN_.dataPoint, JoinType.LEFT);

			criteriaQuery = criteriaQuery.multiselect(root.get(ENTITYNAME_TOKEN_.id), dataPointJoin.get(DataPoint_.name));

			Predicate wherePredicate = specification.toPredicate(root, criteriaQuery, cb);

			criteriaQuery = criteriaQuery.where(wherePredicate);

		}

		TypedQuery<NameDTO> query = em.createQuery(criteriaQuery).setFirstResult((int) pageable.getOffset()).setMaxResults(pageable.getPageSize());

		return query.getResultList();

	}

	public byte[] createShapefileByCriteria(LithoAuth lithoAuth, ENTITYNAME_TOKENLithoCriteria criteria) throws Exception {

		File tmpDir = Files.createTempDir();

		File shapeFile = new File(tmpDir.getAbsolutePath() + "/shapefile/MODULNAME_LOWERCASE_TOKEN.shp");

		shapeFile.getParentFile().mkdirs();

		try {

			SimpleFeatureCollection geoFeatureCollection = findGeoFeatureCollection(lithoAuth, criteria);

			ShapefileDataStore store = SampleWithLocationLithoService.createDataStore(geoFeatureCollection.getSchema(), shapeFile);

			SampleWithLocationLithoService.addCollectionToStore(geoFeatureCollection, store);

		} catch (Exception e) {
			System.out.println(BatchSTATICS.getMessagesOfAllCauses(e));
			e.printStackTrace();
			throw e;
		}

		byte[] byteArray = RandomUtil.zipFolder(tmpDir.toPath());

		tmpDir.delete();

		return byteArray;

	}
	public List<ClusterDTO> findClusterByCriteria(LithoAuth lithoAuth, //
			ENTITYNAME_TOKENLithoCriteria criteria, int maxZoomLevel, int maxNoOfCluster, int maxClusterSize) throws Exception {

		checkPackages(lithoAuth, criteria);

		return new Clusterer(criteria.getLowerBound(), // -90F, // ,
				criteria.getLeftBound(), // -180F, // leftBound,
				criteria.getUpperBound(), // 90F, // upperBound,
				criteria.getRightBound(), // 180F, // rightBound,
				maxZoomLevel, maxNoOfCluster, maxClusterSize) {

			@Override
			public int countLocationsInArea(Float lowerBound, Float leftBound, Float upperBound, Float rightBound) {

				criteria.setLowerBound(lowerBound);
				criteria.setLeftBound(leftBound);
				criteria.setUpperBound(upperBound);
				criteria.setRightBound(rightBound);


				long result = -1;

				try {
					result = countByCriteria(lithoAuth, criteria);
				} catch (Exception e) {

					e.printStackTrace();
				}

				return (int) result;

			}

		}.cluster();

	}
	private void checkPackages(LithoAuth lithoAuth, ENTITYNAME_TOKENLithoCriteria criteria) throws Exception {
		if (criteria.getDataPointLithoCriteria().getDataPackageId() == null) {
			criteria.getDataPointLithoCriteria().setDataPackageId(new LongFilter());
		}
		criteria.getDataPointLithoCriteria().getDataPackageId().setIn(bouncer.bounceOrCreatePackageIds(lithoAuth, criteria.getDataPointLithoCriteria().getDataPackageId().getIn()));
	}

	public SimpleFeatureCollection findGeoFeatureCollection(LithoAuth lithoAuth, ENTITYNAME_TOKENLithoCriteria criteria) throws Exception {

		ProjectionDTOCollection<DataPointLithoProjectionDTO> projectionDTOCollection = findProjectionDTOs(lithoAuth, criteria);

		return GeoSTATICS.projectionDTOs2SimpleFeatureCollection(projectionDTOCollection.getAll());

	}

	private ProjectionDTOCollection<DataPointLithoProjectionDTO> findProjectionDTOs(LithoAuth lithoAuth, ENTITYNAME_TOKENLithoCriteria criteria) throws Exception {

		Specification<ENTITYNAME_TOKEN> specification = createSpecification(lithoAuth, criteria);

		return new ProjectionDTOCollection<DataPointLithoProjectionDTO>(filterAndProject(specification)) {
		};
	}

	public List<DataPointLithoProjectionDTO> filterAndProject(Specification<ENTITYNAME_TOKEN> specification) {

		CriteriaBuilder cb = em.getCriteriaBuilder();

		CriteriaQuery<DataPointLithoProjectionDTO> criteriaQuery = cb.createQuery(DataPointLithoProjectionDTO.class);

		{ // defining the criteriaQuery
			// FROM
			Root<ENTITYNAME_TOKEN> root = criteriaQuery.from(ENTITYNAME_TOKEN.class);
			Join<ENTITYNAME_TOKEN, DataPoint> dataPointJoin = root.join(ENTITYNAME_TOKEN_.dataPoint, JoinType.LEFT);
			Join<DataPoint, Sample> sampleJoin = dataPointJoin.join(DataPoint_.sample, JoinType.LEFT);
			Join<Sample, Location> locationJoin = sampleJoin.join(Sample_.location, JoinType.LEFT);

			criteriaQuery = criteriaQuery.select(cb.construct(DataPointLithoProjectionDTO.class, //
					dataPointJoin.get(DataPoint_.id), // Long id, //
					locationJoin.get(Location_.lon), // Float lat, //
					locationJoin.get(Location_.lat), // Float lon, //
					dataPointJoin.get(DataPoint_.name), // String name, //
					sampleJoin.get(Sample_.id), // Long sampleId, //
					sampleJoin.get(Sample_.name) // String sampleName //
			));

			Predicate wherePredicate = specification.toPredicate(root, criteriaQuery, cb);

			Predicate deletedPredicate = cb.isNull(dataPointJoin.get(DataPoint_.DELETED_TIMESTAMP));

			criteriaQuery = criteriaQuery.where(wherePredicate, deletedPredicate);
		}

		return em.createQuery(criteriaQuery).getResultList();

	}

	public FloatTable getData(LithoAuth lithoAuth, Long uPbDatapointId) {
		FloatTable floatTable = new FloatTable(	new ArrayList<String>(Arrays.asList("X","errX","Y","errY","rXY")),	new ArrayList<>());
		try {
			ENTITYNAME_TOKEN dataPoint = repository.getOne(uPbDatapointId);
			for(MODULNAME_TOKENSpotData uPbSpot: dataPoint.getMODULNAME_TOKENSpotData()) {
				
				floatTable.addRow(new ArrayList<Float>(Arrays.asList(uPbSpot.geti207Pb235UCommPbCorr(), uPbSpot.geti207Pb235UCommPbCorrUncertainty(), uPbSpot.geti206Pb238UCommPbCorr(), uPbSpot.geti206Pb238UCommPbCorrUncertainty(), uPbSpot.getRho207Pb235U206Pb238Ucorr())));

			}
		} catch (Exception e) {
			log.error("could not read MODULNAME_LOWERCASE_TOKEN data", e);
		}
		return floatTable;
	}

}
